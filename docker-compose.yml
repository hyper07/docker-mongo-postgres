version: "3.1"

services:
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./db/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: PassW0rd
      POSTGRES_DB: db
      PGDATA: /var/lib/postgresql/data
    networks:
      - webnet

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    depends_on:
      - postgres
    ports:
      - 8080:8080
    networks:
      - webnet

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./db/mongodb:/var/lib/mongo/data
      - "$PWD/mongo-entrypoint/:/docker-entrypoint-initdb.d/"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: PassW0rd
      MONGO_INITDB_DATABASE: db
    networks:
      - webnet

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    depends_on:
      - mongo
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: PassW0rd
      ME_CONFIG_MONGODB_URL: mongodb://admin:PassW0rd@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - webnet

  app:
    container_name: app
    build: ./app
    restart: always
    depends_on:
      - "mongo"
      - "postgres"
    command: ["/wait-for-it.sh", "postgres:5432", "--", "npm", "run", "prod"]
    ports:
      - "3000:3000"
    volumes:
      - ./app:/server
      - /app/node_modules
    networks:
      - webnet

# volumes:
#   db-data:
#     driver: local

networks:
  webnet:
    driver: bridge
